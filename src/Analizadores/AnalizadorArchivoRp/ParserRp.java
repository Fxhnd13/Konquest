
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.AnalizadorArchivoRp;

import java_cup.runtime.Symbol;
import BackEnd.Objects.Map;
import BackEnd.Objects.Player;
import BackEnd.Objects.Planet;
import java.util.ArrayList;
import Analizadores.AnalizadorArchivoRp.LexerRp;
import Analizadores.Objects.Atributo;
import Analizadores.Objects.ErrorMessage;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserRp extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserRp() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserRp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserRp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\005\000\002" +
    "\003\005\000\002\004\004\000\002\004\003\000\002\005" +
    "\006\000\002\005\005\000\002\006\010\000\002\006\006" +
    "\000\002\006\006\000\002\006\006\000\002\006\006\000" +
    "\002\006\007\000\002\006\007\000\002\007\006\000\002" +
    "\007\006\000\002\010\004\000\002\010\003\000\002\011" +
    "\006\000\002\011\006\000\002\012\004\000\002\012\003" +
    "\000\002\013\004\000\002\013\003\000\002\014\006\000" +
    "\002\014\005\000\002\014\005\000\002\015\012\000\002" +
    "\020\004\000\002\020\003\000\002\021\006\000\002\022" +
    "\005\000\002\023\010\000\002\023\006\000\002\023\006" +
    "\000\002\023\006\000\002\023\010\000\002\023\006\000" +
    "\002\023\006\000\002\023\005\000\002\023\005\000\002" +
    "\024\004\000\002\024\003\000\002\025\004\000\002\025" +
    "\003\000\002\026\006\000\002\027\006\000\002\030\005" +
    "\000\002\031\006\000\002\031\010\000\002\031\006\000" +
    "\002\031\006\000\002\031\006\000\002\031\006\000\002" +
    "\031\010\000\002\031\010\000\002\031\006\000\002\031" +
    "\005\000\002\031\005\000\002\032\004\000\002\032\003" +
    "\000\002\033\004\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\006\003\004\030\006\001\002\000\012\005" +
    "\335\006\337\007\336\010\340\001\002\000\004\002\334" +
    "\001\002\000\016\003\015\005\016\006\020\007\007\010" +
    "\017\046\010\001\002\000\004\034\331\001\002\000\004" +
    "\034\236\001\002\000\006\031\025\035\024\001\002\000" +
    "\006\031\025\035\024\001\002\000\004\002\000\001\002" +
    "\000\006\031\025\035\024\001\002\000\010\031\212\033" +
    "\211\035\210\001\002\000\004\034\114\001\002\000\004" +
    "\034\111\001\002\000\004\034\030\001\002\000\006\031" +
    "\025\035\024\001\002\000\006\031\025\035\024\001\002" +
    "\000\004\002\ufffb\001\002\000\016\003\015\005\016\006" +
    "\020\007\007\010\017\046\010\001\002\000\004\002\ufff3" +
    "\001\002\000\004\002\ufff4\001\002\000\004\002\ufff9\001" +
    "\002\000\004\032\031\001\002\000\004\030\033\001\002" +
    "\000\006\031\uffca\035\uffca\001\002\000\022\003\043\004" +
    "\034\023\042\024\044\025\040\047\037\050\036\051\035" +
    "\001\002\000\004\034\104\001\002\000\004\034\101\001" +
    "\002\000\004\034\076\001\002\000\004\034\071\001\002" +
    "\000\004\034\066\001\002\000\006\033\064\035\063\001" +
    "\002\000\004\034\057\001\002\000\006\030\054\035\053" +
    "\001\002\000\004\034\045\001\002\000\004\055\046\001" +
    "\002\000\006\031\051\035\050\001\002\000\006\033\uffd5" +
    "\035\uffd5\001\002\000\022\003\043\004\034\023\042\024" +
    "\044\025\040\047\037\050\036\051\035\001\002\000\006" +
    "\033\uffcd\035\uffcd\001\002\000\006\033\uffce\035\uffce\001" +
    "\002\000\022\003\043\004\034\023\042\024\044\025\040" +
    "\047\037\050\036\051\035\001\002\000\022\003\043\004" +
    "\034\023\042\024\044\025\040\047\037\050\036\051\035" +
    "\001\002\000\006\033\uffd0\035\uffd0\001\002\000\006\033" +
    "\uffcf\035\uffcf\001\002\000\004\055\060\001\002\000\006" +
    "\031\051\035\050\001\002\000\006\033\uffd6\035\uffd6\001" +
    "\002\000\010\002\uffd8\031\uffd8\035\uffd8\001\002\000\004" +
    "\030\033\001\002\000\010\002\uffcb\031\uffcb\035\uffcb\001" +
    "\002\000\010\002\uffcc\031\uffcc\035\uffcc\001\002\000\004" +
    "\056\067\001\002\000\006\031\051\035\050\001\002\000" +
    "\006\033\uffd4\035\uffd4\001\002\000\004\036\072\001\002" +
    "\000\004\054\073\001\002\000\004\036\074\001\002\000" +
    "\006\031\051\035\050\001\002\000\006\033\uffd3\035\uffd3" +
    "\001\002\000\004\055\077\001\002\000\006\031\051\035" +
    "\050\001\002\000\006\033\uffd2\035\uffd2\001\002\000\004" +
    "\055\102\001\002\000\006\031\051\035\050\001\002\000" +
    "\006\033\uffd1\035\uffd1\001\002\000\004\036\105\001\002" +
    "\000\004\054\106\001\002\000\004\036\107\001\002\000" +
    "\006\031\051\035\050\001\002\000\006\033\uffd7\035\uffd7" +
    "\001\002\000\004\032\112\001\002\000\004\030\033\001" +
    "\002\000\006\031\uffd9\035\uffd9\001\002\000\004\030\115" +
    "\001\002\000\020\011\124\012\125\017\123\020\117\021" +
    "\116\022\120\041\121\001\002\000\004\034\171\001\002" +
    "\000\004\034\166\001\002\000\004\034\163\001\002\000" +
    "\004\034\160\001\002\000\006\031\ufff2\035\ufff2\001\002" +
    "\000\004\034\155\001\002\000\004\034\150\001\002\000" +
    "\004\034\126\001\002\000\004\030\127\001\002\000\006" +
    "\013\132\014\131\001\002\000\006\031\145\035\144\001" +
    "\002\000\004\034\141\001\002\000\004\034\133\001\002" +
    "\000\004\055\134\001\002\000\006\031\137\035\135\001" +
    "\002\000\006\013\132\014\131\001\002\000\006\031\uffe9" +
    "\035\uffe9\001\002\000\006\031\uffe6\035\uffe6\001\002\000" +
    "\006\031\uffe7\035\uffe7\001\002\000\004\055\142\001\002" +
    "\000\006\031\137\035\135\001\002\000\006\031\uffe8\035" +
    "\uffe8\001\002\000\020\011\124\012\125\017\123\020\117" +
    "\021\116\022\120\041\121\001\002\000\010\002\uffe0\031" +
    "\uffe0\035\uffe0\001\002\000\010\002\uffea\031\uffea\035\uffea" +
    "\001\002\000\010\002\uffe1\031\uffe1\035\uffe1\001\002\000" +
    "\004\036\151\001\002\000\004\054\152\001\002\000\004" +
    "\036\153\001\002\000\006\031\145\035\144\001\002\000" +
    "\010\002\ufff0\031\ufff0\035\ufff0\001\002\000\004\053\156" +
    "\001\002\000\006\031\145\035\144\001\002\000\010\002" +
    "\uffee\031\uffee\035\uffee\001\002\000\004\055\161\001\002" +
    "\000\006\031\145\035\144\001\002\000\010\002\uffef\031" +
    "\uffef\035\uffef\001\002\000\004\055\164\001\002\000\006" +
    "\031\145\035\144\001\002\000\010\002\uffec\031\uffec\035" +
    "\uffec\001\002\000\004\053\167\001\002\000\006\031\145" +
    "\035\144\001\002\000\010\002\uffed\031\uffed\035\uffed\001" +
    "\002\000\004\030\172\001\002\000\006\037\173\040\175" +
    "\001\002\000\004\034\205\001\002\000\006\031\145\035" +
    "\144\001\002\000\004\034\176\001\002\000\004\053\177" +
    "\001\002\000\006\031\202\035\201\001\002\000\006\031" +
    "\uffe4\035\uffe4\001\002\000\006\037\173\040\175\001\002" +
    "\000\006\031\uffe2\035\uffe2\001\002\000\006\031\uffe3\035" +
    "\uffe3\001\002\000\010\002\uffeb\031\uffeb\035\uffeb\001\002" +
    "\000\004\053\206\001\002\000\006\031\202\035\201\001" +
    "\002\000\006\031\uffe5\035\uffe5\001\002\000\022\011\124" +
    "\012\125\017\123\020\117\021\116\022\120\030\217\041" +
    "\121\001\002\000\006\031\025\035\024\001\002\000\006" +
    "\031\025\035\024\001\002\000\006\031\uffdd\035\uffdd\001" +
    "\002\000\004\002\ufff5\001\002\000\004\002\ufff6\001\002" +
    "\000\006\031\uffde\035\uffde\001\002\000\004\004\221\001" +
    "\002\000\006\031\ufff1\035\ufff1\001\002\000\004\034\222" +
    "\001\002\000\004\036\223\001\002\000\004\054\224\001" +
    "\002\000\004\036\225\001\002\000\004\031\226\001\002" +
    "\000\006\033\231\035\227\001\002\000\004\030\217\001" +
    "\002\000\010\002\uffdc\031\uffdc\035\uffdc\001\002\000\010" +
    "\002\uffda\031\uffda\035\uffda\001\002\000\010\002\uffdb\031" +
    "\uffdb\035\uffdb\001\002\000\004\002\ufffa\001\002\000\004" +
    "\002\ufff7\001\002\000\004\002\ufff8\001\002\000\004\032" +
    "\237\001\002\000\004\030\241\001\002\000\006\031\uffc9" +
    "\035\uffc9\001\002\000\026\003\254\023\252\025\251\027" +
    "\242\041\246\042\243\043\245\044\250\045\247\052\244" +
    "\001\002\000\004\034\326\001\002\000\004\034\323\001" +
    "\002\000\004\034\316\001\002\000\004\034\313\001\002" +
    "\000\004\034\310\001\002\000\004\034\303\001\002\000" +
    "\004\034\276\001\002\000\004\034\273\001\002\000\004" +
    "\034\265\001\002\000\006\033\262\035\261\001\002\000" +
    "\006\030\256\035\255\001\002\000\026\003\254\023\252" +
    "\025\251\027\242\041\246\042\243\043\245\044\250\045" +
    "\247\052\244\001\002\000\026\003\254\023\252\025\251" +
    "\027\242\041\246\042\243\043\245\044\250\045\247\052" +
    "\244\001\002\000\006\033\uffbe\035\uffbe\001\002\000\006" +
    "\033\uffbd\035\uffbd\001\002\000\004\030\241\001\002\000" +
    "\006\031\uffb9\035\uffb9\001\002\000\006\031\uffc8\035\uffc8" +
    "\001\002\000\006\031\uffba\035\uffba\001\002\000\004\055" +
    "\266\001\002\000\006\031\270\035\267\001\002\000\026" +
    "\003\254\023\252\025\251\027\242\041\246\042\243\043" +
    "\245\044\250\045\247\052\244\001\002\000\006\033\uffbb" +
    "\035\uffbb\001\002\000\006\033\uffc2\035\uffc2\001\002\000" +
    "\006\033\uffbc\035\uffbc\001\002\000\004\056\274\001\002" +
    "\000\006\031\270\035\267\001\002\000\006\033\uffbf\035" +
    "\uffbf\001\002\000\004\036\277\001\002\000\004\054\300" +
    "\001\002\000\004\036\301\001\002\000\006\031\270\035" +
    "\267\001\002\000\006\033\uffc1\035\uffc1\001\002\000\004" +
    "\036\304\001\002\000\004\054\305\001\002\000\004\036" +
    "\306\001\002\000\006\031\270\035\267\001\002\000\006" +
    "\033\uffc0\035\uffc0\001\002\000\004\055\311\001\002\000" +
    "\006\031\270\035\267\001\002\000\006\033\uffc5\035\uffc5" +
    "\001\002\000\004\055\314\001\002\000\006\031\270\035" +
    "\267\001\002\000\006\033\uffc3\035\uffc3\001\002\000\004" +
    "\036\317\001\002\000\004\054\320\001\002\000\004\036" +
    "\321\001\002\000\006\031\270\035\267\001\002\000\006" +
    "\033\uffc6\035\uffc6\001\002\000\004\055\324\001\002\000" +
    "\006\031\270\035\267\001\002\000\006\033\uffc4\035\uffc4" +
    "\001\002\000\004\055\327\001\002\000\006\031\270\035" +
    "\267\001\002\000\006\033\uffc7\035\uffc7\001\002\000\004" +
    "\032\332\001\002\000\004\030\217\001\002\000\006\031" +
    "\uffdf\035\uffdf\001\002\000\004\002\001\001\002\000\020" +
    "\011\124\012\125\017\123\020\117\021\116\022\120\041" +
    "\121\001\002\000\004\030\217\001\002\000\004\030\033" +
    "\001\002\000\004\030\033\001\002\000\004\002\ufffd\001" +
    "\002\000\004\002\ufffc\001\002\000\004\002\ufffe\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\012\005\021\014\013\021\020" +
    "\026\010\027\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\234\001\001\000\004\004\233\001\001" +
    "\000\002\001\001\000\004\004\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\026\001\001\000\004\004\022\001\001\000" +
    "\002\001\001\000\016\003\025\005\021\014\013\021\020" +
    "\026\010\027\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\031" +
    "\001\001\000\002\001\001\000\004\023\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\046\001\001\000\002\001\001\000" +
    "\004\023\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\055\001\001\000\004\023\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\127\001\001\000\004\013\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\135\001\001\000\004\007\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\142\001\001\000\002\001\001" +
    "\000\004\006\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\173" +
    "\001\001\000\002\001\001\000\004\013\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\177\001\001" +
    "\000\002\001\001\000\004\011\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\206\001\001\000\002\001\001\000\006\006" +
    "\217\015\215\001\001\000\004\004\214\001\001\000\006" +
    "\004\213\016\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\227\001\001\000\004\015\231\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\237\001\001\000\002\001\001\000\004\031\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\262\001\001\000\002\001\001\000\004\031\257" +
    "\001\001\000\004\031\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\270\001\001\000\004\031\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\274\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\301\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\306\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\314\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\324\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\327\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\332\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\343\001" +
    "\001\000\004\015\342\001\001\000\004\022\341\001\001" +
    "\000\004\022\340\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserRp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserRp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserRp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        private ArrayList<ErrorMessage> errores = new ArrayList<ErrorMessage>();

        public ArrayList<ErrorMessage> getErrores(){
            return errores;
        }
        
        public ParserRp(LexerRp lex) { 
            super(lex);   
	}
        
        public void setAccion(String tipo, String mensaje, String accion){
            System.out.println(tipo+"         "+mensaje);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
            System.err.println("Couldn't repair and continue parse "+cur_token.value.toString());
        }

        public void syntax_error(Symbol s){
            String message = "";
            StringBuilder m = new StringBuilder("Error:");
            String cadena = s.value.toString();
            int linea = (s.left+1);
            int columna = (s.right+1);
            switch(s.toString()){
                case "#1" : message=("Con error xd"); break;
                case "#2" : message=("No se espraba la palabra reservada nombres"); break;
                case "#3": message=("No se abrio llaves en la estructura incial."); break;
                case "#4": message=("No se esperaba la palabra reservada Planetas Neutrales"); break;
                case "#5": message= ("No se esperaba la palabra reseravada jugadores"); break;
                case "#6" : message=("No se esperaba la palabra resrvada planetas"); break;
                case "#7" : message=("No se esperaba la palabra rservada id"); break;
                case "#8" : message=("No se esperaba la palabra reservada tamaño"); break;
                case "#9": message=("No se esperaba la palabra reservada Filas"); break;
                case "#10": message=("No se esperba la palabra reservada columnas"); break;
                case "#11": message=("No se esperaba la palabra reservada al azar"); break;
                case "#12": message=("No se esperaba la palabra reservada cantidad planetas neutrales"); break;
                case "#13": message=("No se esperaba la palabra reservada mapaCiego"); break;
                case "#14": message=("No se esperaba la palabra resrvada acumular"); break;
                case "#15": message=("No se esperaba la palabra reservada neutrales"); break;
                case "#16": message=("No se esperaba la palabra reservada finalizacion"); break;
                case "#17": message=("No se esperaba la palabra reservada naves"); break;
                case "#18": message=("No se esperaba la palabra reservada produccion");break;
                case "#19": message=("No se esperaba la palabra reservada porcentaje de muertes"); break;
                case "#20": message=("No se esperaba la palabra reservada planetas"); break;
                case "#21": message=("No se esperaba la palabra rservada tipo"); break;
                case "#22": message=("No se esperaba una llave abierta"); break;
                case "#23": message=("No se esperaba una llave cerrada"); break;
                case "#24": message=("No se esperaba un corchete abierto"); break;
                case "#25": message=("No se esperaba un corchete cerrado"); break;
                case "#26": message=("No se esperaba los dos puntos"); break;
                case "#27": message=("No se esperaba una coma"); break;
                case "#28": message=("No se esperaba una comilla"); break;
                case "#29": message=("No se esperaba la palabra reservada mostrarNaves"); break;
                case "#30": message=("No se esperaba la palabra reservada mostrarEstadisticas"); break;
                case "#31": message=("No se esperaba un valor booleano"); break;
                case "#32": message=("No se esperaba un id"); break;
                case "#33": message=("No se esperaba un entero"); break;
                case "#34": message=("No se esperaba un double"); break;
                case "#35": message=("No se esperaba un tipo de jugador"); break;
                default: message=("Causa desconocida"); break;
            }
            errores.add(new ErrorMessage(linea, columna, cadena, message));
        }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserRp$actions {


    
    ArrayList<Atributo> mapa = new ArrayList<Atributo>();
    ArrayList<Atributo> jugadores = new ArrayList<Atributo>();
    ArrayList<Atributo> planetas = new ArrayList<Atributo>();

    String getValorPorTipo(String tipo, ArrayList<Atributo> objetos){
        String valor = null;
        for (Atributo atributo : objetos) {
            if(atributo.getTipo().equals(tipo))valor = atributo.getValor();
        }
        return valor;
    }

    void aggAtributoMapa(String tipo, String atributo){
        mapa.add(new Atributo(tipo, atributo));
    }

    void aggAtributoJugador(String tipo, String atributo){
        jugadores.add(new Atributo(tipo, atributo));
    }

    void aggAtributoPlaneta(String tipo, String atributo){
        planetas.add(new Atributo(tipo, atributo));
    }
    
    boolean atributoMapaRepetido(String tipo){
        boolean valor = false;
        for(Atributo atributo: mapa){
            if(tipo.equals(atributo.getTipo())){
                valor = true;
            }
        }
        return valor;
    }
    
    boolean nombreJugadorRepetido(String nombre){
        boolean valor = false;
        if(!jugadores.isEmpty()){
            for(Atributo atributo: jugadores){
                if(atributo.getTipo().equals(nombre))valor = true;
            }
        }
        return valor;
    }
    
    boolean nombrePlanetaRepetido(String nombre){
        boolean valor = false;
        if(!planetas.isEmpty()){
            for(Atributo atributo: planetas){
                if(atributo.getTipo().equals(nombre))valor = true;
            }
        }
        return valor;
    }


  private final ParserRp parser;

  /** Constructor */
  CUP$ParserRp$actions(ParserRp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserRp$do_action_part00000000(
    int                        CUP$ParserRp$act_num,
    java_cup.runtime.lr_parser CUP$ParserRp$parser,
    java.util.Stack            CUP$ParserRp$stack,
    int                        CUP$ParserRp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserRp$result;

      /* select the action based on the action number */
      switch (CUP$ParserRp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= So EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).value;
		RESULT = start_val;
              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserRp$parser.done_parsing();
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // So ::= LLAVE_A inicio 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("So",0, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // So ::= error PR_MAPA strMapa 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("So",0, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // So ::= error PR_JUGADORES jugadores 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("So",0, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // So ::= error PR_PLANETAS planetas 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("So",0, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // So ::= error PR_PLANETAS_NEUTRALES planetas 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("So",0, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= dclMapa strInicioPrima 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicio ::= dclJugadores strInicioPrima 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio ::= dclPlanetas strInicioPrima 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inicio ::= dclPlanetasNeutrales strInicioPrima 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicio ::= dclAcciones strInicioPrima 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inicio ::= error CORCHETE_C strInicioPrima 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicio ::= error LLAVE_C strInicioPrima 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // strInicioPrima ::= SEPARADOR inicio 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strInicioPrima",2, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // strInicioPrima ::= LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strInicioPrima",2, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dclMapa ::= PR_MAPA ASIGNACION LLAVE_A strMapa 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("dclMapa",3, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dclMapa ::= error SEPARADOR strMapa 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("dclMapa",3, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // strMapa ::= PR_ID ASIGNACION COMILLA ID COMILLA strMapaPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)).value;
		 
                            if(atributoMapaRepetido("id")){
                               errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(), "Se repitio el atributo nombre del mapa"));
                            }else{
                                aggAtributoMapa("id", e); 
                            }
                        
              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strMapa",4, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-5)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // strMapa ::= PR_TURNO ASIGNACION ENTERO strMapaPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).value;
		
                            if(atributoMapaRepetido("turno")){
                                errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(), "Se repitio el atributo turno"));
                            }else{
                                aggAtributoMapa("turno", e);
                            }
                        
              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strMapa",4, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // strMapa ::= PR_MAPA_CIEGO ASIGNACION BOOLEAN strMapaPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).value;
		 
                            if(atributoMapaRepetido("mapaCiego")){
                                errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(), "se repitio el atributo mapaCiego"));
                            }else{
                                aggAtributoMapa("mapaCiego", e); 
                            }
                        
              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strMapa",4, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // strMapa ::= PR_ACUMULAR ASIGNACION BOOLEAN strMapaPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).value;
		 
                            if(atributoMapaRepetido("acumular")){
                                errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(), "se retpitio el atributo acumular del mapa"));
                            }else{
                                aggAtributoMapa("acumular", e); 
                            }
                        
              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strMapa",4, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // strMapa ::= PR_FINALIZACION ASIGNACION ENTERO strMapaPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).value;
		 
                            if(atributoMapaRepetido("finalizacion")){
                               errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(), "se repitio el atributo finalizacion del mapa" ));
                            }else{
                                aggAtributoMapa("finalizacion", e); 
                            }
                        
              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strMapa",4, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // strMapa ::= PR_NEUTRALES ASIGNACION LLAVE_A strNeutralesConf strMapaPrima 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strMapa",4, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-4)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // strMapa ::= PR_SIZE ASIGNACION LLAVE_A strSize strMapaPrima 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strMapa",4, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-4)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // strSize ::= PR_FILAS ASIGNACION ENTERO strSizePrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).value;
		 
                            if(atributoMapaRepetido("filas")){
                                errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(), "Se repitio el atributo filas del mapa"));
                            }else{
                                aggAtributoMapa("filas", e); 
                            }
                        
              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strSize",5, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // strSize ::= PR_COLUMNAS ASIGNACION ENTERO strSizePrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).value;
		 
                            if(atributoMapaRepetido("columnas")){
                                errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(), "se repitio el atributo columnas del mapa"));
                            }else{
                                aggAtributoMapa("columnas", e); 
                            }
                        
              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strSize",5, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // strSizePrima ::= SEPARADOR strSize 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strSizePrima",6, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // strSizePrima ::= LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strSizePrima",6, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // strNeutralesConf ::= PR_MOSTRAR_NAVES ASIGNACION BOOLEAN strNeutralesPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).value;
		 
                            if(atributoMapaRepetido("mostrarNaves")){
                                errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(), "se repitio el atributo mostrarNaves del mapa"));
                            }else{
                                aggAtributoMapa("mostrarNaves", e); 
                            }
                        
              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strNeutralesConf",7, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // strNeutralesConf ::= PR_MOSTRAR_ESTADISTICAS ASIGNACION BOOLEAN strNeutralesPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).value;
		 
                            if(atributoMapaRepetido("mostrarEstadisticas")){
                               errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(), "Se repitio el atributo mostrarEstadistcias del mapa"));
                            }else{
                                aggAtributoMapa("mostrarEstadisticas", e); 
                            }
                        
              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strNeutralesConf",7, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // strNeutralesPrima ::= SEPARADOR strNeutralesConf 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strNeutralesPrima",8, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // strNeutralesPrima ::= LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strNeutralesPrima",8, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // strMapaPrima ::= SEPARADOR strMapa 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strMapaPrima",9, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // strMapaPrima ::= LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strMapaPrima",9, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dclJugadores ::= PR_JUGADORES ASIGNACION CORCHETE_A jugadores 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("dclJugadores",10, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dclJugadores ::= error SEPARADOR jugadores 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("dclJugadores",10, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dclJugadores ::= error LLAVE_C strJugador 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("dclJugadores",10, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // jugadores ::= LLAVE_A PR_NOMBRE ASIGNACION COMILLA ID COMILLA LLAVE_C listJugadores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)).value;
		 
                            if(nombreJugadorRepetido(e)){
                                errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(),"Se repitio el nombre del jugador ingresado"));
                            }else{
                                aggAtributoJugador("nombre", e); 
                            }
                        
              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("jugadores",11, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-7)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listJugadores ::= SEPARADOR jugadores 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("listJugadores",14, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listJugadores ::= CORCHETE_C 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("listJugadores",14, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dclPlanetas ::= PR_PLANETAS ASIGNACION CORCHETE_A planetas 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("dclPlanetas",15, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // planetas ::= LLAVE_A strPlaneta listPlanetas 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("planetas",16, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // strPlaneta ::= PR_NOMBRE ASIGNACION COMILLA ID COMILLA strPlanetaPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)).value;
		 
                            if(nombrePlanetaRepetido(e)){
                                errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(), "Se repitio el nombre del valor ingresado"));
                            }else{
                                aggAtributoPlaneta("nombre", e);
                            }
                        
              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strPlaneta",17, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-5)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // strPlaneta ::= PR_NAVES ASIGNACION ENTERO strPlanetaPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).value;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strPlaneta",17, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // strPlaneta ::= PR_PRODUCCION ASIGNACION ENTERO strPlanetaPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).value;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strPlaneta",17, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // strPlaneta ::= PR_PORCENTAJE_MUERTES ASIGNACION DOUBLE strPlanetaPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)).value;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strPlaneta",17, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // strPlaneta ::= PR_CONQUISTADOR ASIGNACION COMILLA ID COMILLA strPlanetaPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)).value;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strPlaneta",17, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-5)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // strPlaneta ::= PR_POSICION_X ASIGNACION ENTERO strPlanetaPrima 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strPlaneta",17, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // strPlaneta ::= PR_POSICION_Y ASIGNACION ENTERO strPlanetaPrima 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strPlaneta",17, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // strPlaneta ::= error LLAVE_A strPlaneta 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strPlaneta",17, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // strPlaneta ::= error SEPARADOR strPlaneta 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strPlaneta",17, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // strPlanetaPrima ::= SEPARADOR strPlaneta 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strPlanetaPrima",18, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // strPlanetaPrima ::= LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strPlanetaPrima",18, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // listPlanetas ::= SEPARADOR planetas 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("listPlanetas",19, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // listPlanetas ::= CORCHETE_C 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("listPlanetas",19, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dclPlanetasNeutrales ::= PR_PLANETAS_NEUTRALES ASIGNACION CORCHETE_A planetas 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("dclPlanetasNeutrales",20, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // dclAcciones ::= PR_ACCIONES ASIGNACION CORCHETE_A acciones 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("dclAcciones",21, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // acciones ::= LLAVE_A strAccion listAcciones 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("acciones",22, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // strAccion ::= PR_TIPO ASIGNACION ENTERO strAccionPrima 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strAccion",23, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // strAccion ::= PR_JUGADOR ASIGNACION COMILLA ID COMILLA strAccionPrima 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strAccion",23, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-5)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // strAccion ::= PR_TURNO ASIGNACION ENTERO strAccionPrima 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strAccion",23, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // strAccion ::= PR_TURNO_SALIDA ASIGNACION ENTERO strAccionPrima 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strAccion",23, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // strAccion ::= PR_TURNO_LLEGADA ASIGNACION ENTERO strAccionPrima 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strAccion",23, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // strAccion ::= PR_NAVES ASIGNACION ENTERO strAccionPrima 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strAccion",23, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // strAccion ::= PR_PLANETA_SALIDA ASIGNACION COMILLA ID COMILLA strAccionPrima 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strAccion",23, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-5)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // strAccion ::= PR_PLANETA_DESTINO ASIGNACION COMILLA ID COMILLA strAccionPrima 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strAccion",23, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-5)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // strAccion ::= PR_PORCENTAJE_MUERTES ASIGNACION DOUBLE strAccionPrima 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strAccion",23, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // strAccion ::= error LLAVE_A strAccion 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strAccion",23, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // strAccion ::= error SEPARADOR strAccion 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strAccion",23, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-2)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // strAccionPrima ::= SEPARADOR strAccion 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strAccionPrima",24, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // strAccionPrima ::= LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("strAccionPrima",24, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // listAcciones ::= SEPARADOR acciones 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("listAcciones",25, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.elementAt(CUP$ParserRp$top-1)), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // listAcciones ::= CORCHETE_C 
            {
              Object RESULT =null;

              CUP$ParserRp$result = parser.getSymbolFactory().newSymbol("listAcciones",25, ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRp$stack.peek()), RESULT);
            }
          return CUP$ParserRp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserRp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserRp$do_action(
    int                        CUP$ParserRp$act_num,
    java_cup.runtime.lr_parser CUP$ParserRp$parser,
    java.util.Stack            CUP$ParserRp$stack,
    int                        CUP$ParserRp$top)
    throws java.lang.Exception
    {
              return CUP$ParserRp$do_action_part00000000(
                               CUP$ParserRp$act_num,
                               CUP$ParserRp$parser,
                               CUP$ParserRp$stack,
                               CUP$ParserRp$top);
    }
}

}
