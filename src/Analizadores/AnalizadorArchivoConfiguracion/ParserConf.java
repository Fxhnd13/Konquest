
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.AnalizadorArchivoConfiguracion;

import java_cup.runtime.Symbol;
import BackEnd.Objects.Map;
import BackEnd.Objects.Player;
import BackEnd.Objects.Planet;
import java.util.ArrayList;
import Analizadores.AnalizadorArchivoConfiguracion.LexerConf;
import Analizadores.Objects.Atributo;
import Analizadores.Objects.ErrorMessage;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserConf extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserConf() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserConf(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserConf(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\005\000\002\003\005\000\002" +
    "\004\004\000\002\004\003\000\002\005\006\000\002\005" +
    "\005\000\002\006\010\000\002\006\006\000\002\006\006" +
    "\000\002\006\006\000\002\006\006\000\002\006\006\000" +
    "\002\006\007\000\002\006\007\000\002\007\006\000\002" +
    "\007\006\000\002\010\004\000\002\010\003\000\002\011" +
    "\006\000\002\011\006\000\002\011\006\000\002\012\004" +
    "\000\002\012\003\000\002\013\004\000\002\013\003\000" +
    "\002\014\006\000\002\014\005\000\002\014\005\000\002" +
    "\015\005\000\002\016\010\000\002\016\007\000\002\016" +
    "\006\000\002\017\006\000\002\020\004\000\002\020\003" +
    "\000\002\021\004\000\002\021\003\000\002\022\004\000" +
    "\002\022\003\000\002\023\006\000\002\024\005\000\002" +
    "\025\010\000\002\025\006\000\002\025\006\000\002\025" +
    "\006\000\002\025\005\000\002\025\005\000\002\026\004" +
    "\000\002\026\003\000\002\027\004\000\002\027\003\000" +
    "\002\030\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\006\003\004\030\006\001\002\000\012\005" +
    "\255\006\257\007\256\010\260\001\002\000\004\002\254" +
    "\001\002\000\014\003\013\005\014\006\017\007\007\010" +
    "\015\001\002\000\004\034\251\001\002\000\006\031\023" +
    "\035\022\001\002\000\004\002\000\001\002\000\006\031" +
    "\023\035\022\001\002\000\010\031\201\033\202\035\200" +
    "\001\002\000\004\034\074\001\002\000\004\034\071\001" +
    "\002\000\006\031\023\035\022\001\002\000\004\034\025" +
    "\001\002\000\006\031\023\035\022\001\002\000\004\002" +
    "\ufffb\001\002\000\014\003\013\005\014\006\017\007\007" +
    "\010\015\001\002\000\004\002\ufff4\001\002\000\004\002" +
    "\ufff5\001\002\000\004\032\026\001\002\000\004\030\030" +
    "\001\002\000\006\031\uffc4\035\uffc4\001\002\000\014\003" +
    "\032\004\033\023\034\024\031\025\036\001\002\000\004" +
    "\034\065\001\002\000\006\030\062\035\061\001\002\000" +
    "\004\034\054\001\002\000\004\034\051\001\002\000\006" +
    "\033\047\035\046\001\002\000\004\034\037\001\002\000" +
    "\004\044\040\001\002\000\006\031\043\035\042\001\002" +
    "\000\006\033\uffcb\035\uffcb\001\002\000\014\003\032\004" +
    "\033\023\034\024\031\025\036\001\002\000\006\033\uffc7" +
    "\035\uffc7\001\002\000\006\033\uffc8\035\uffc8\001\002\000" +
    "\010\002\uffcf\031\uffcf\035\uffcf\001\002\000\004\030\030" +
    "\001\002\000\010\002\uffc5\031\uffc5\035\uffc5\001\002\000" +
    "\010\002\uffc6\031\uffc6\035\uffc6\001\002\000\004\043\052" +
    "\001\002\000\006\031\043\035\042\001\002\000\006\033" +
    "\uffcd\035\uffcd\001\002\000\004\036\055\001\002\000\004" +
    "\042\056\001\002\000\004\036\057\001\002\000\006\031" +
    "\043\035\042\001\002\000\006\033\uffce\035\uffce\001\002" +
    "\000\014\003\032\004\033\023\034\024\031\025\036\001" +
    "\002\000\014\003\032\004\033\023\034\024\031\025\036" +
    "\001\002\000\006\033\uffca\035\uffca\001\002\000\006\033" +
    "\uffc9\035\uffc9\001\002\000\004\043\066\001\002\000\006" +
    "\031\043\035\042\001\002\000\006\033\uffcc\035\uffcc\001" +
    "\002\000\004\002\ufff9\001\002\000\004\032\072\001\002" +
    "\000\004\030\030\001\002\000\006\031\uffd0\035\uffd0\001" +
    "\002\000\004\030\075\001\002\000\022\011\105\012\077" +
    "\015\103\016\101\017\104\020\076\021\102\022\100\001" +
    "\002\000\004\034\175\001\002\000\004\034\156\001\002" +
    "\000\004\034\153\001\002\000\004\034\150\001\002\000" +
    "\004\034\125\001\002\000\004\034\122\001\002\000\004" +
    "\034\117\001\002\000\004\034\107\001\002\000\006\031" +
    "\ufff3\035\ufff3\001\002\000\004\036\110\001\002\000\004" +
    "\042\111\001\002\000\004\036\112\001\002\000\006\031" +
    "\114\035\113\001\002\000\022\011\105\012\077\015\103" +
    "\016\101\017\104\020\076\021\102\022\100\001\002\000" +
    "\010\002\uffdf\031\uffdf\035\uffdf\001\002\000\010\002\ufff1" +
    "\031\ufff1\035\ufff1\001\002\000\010\002\uffe0\031\uffe0\035" +
    "\uffe0\001\002\000\004\041\120\001\002\000\006\031\114" +
    "\035\113\001\002\000\010\002\uffee\031\uffee\035\uffee\001" +
    "\002\000\004\041\123\001\002\000\006\031\114\035\113" +
    "\001\002\000\010\002\ufff0\031\ufff0\035\ufff0\001\002\000" +
    "\004\030\126\001\002\000\010\024\131\037\127\040\132" +
    "\001\002\000\004\034\145\001\002\000\006\031\114\035" +
    "\113\001\002\000\004\034\141\001\002\000\004\034\133" +
    "\001\002\000\004\041\134\001\002\000\006\031\137\035" +
    "\136\001\002\000\006\031\uffe4\035\uffe4\001\002\000\010" +
    "\024\131\037\127\040\132\001\002\000\006\031\uffe1\035" +
    "\uffe1\001\002\000\006\031\uffe2\035\uffe2\001\002\000\004" +
    "\043\142\001\002\000\006\031\137\035\136\001\002\000" +
    "\006\031\uffe3\035\uffe3\001\002\000\010\002\uffeb\031\uffeb" +
    "\035\uffeb\001\002\000\004\041\146\001\002\000\006\031" +
    "\137\035\136\001\002\000\006\031\uffe5\035\uffe5\001\002" +
    "\000\004\043\151\001\002\000\006\031\114\035\113\001" +
    "\002\000\010\002\uffef\031\uffef\035\uffef\001\002\000\004" +
    "\043\154\001\002\000\006\031\114\035\113\001\002\000" +
    "\010\002\uffec\031\uffec\035\uffec\001\002\000\004\030\157" +
    "\001\002\000\006\013\162\014\161\001\002\000\006\031" +
    "\114\035\113\001\002\000\004\034\171\001\002\000\004" +
    "\034\163\001\002\000\004\043\164\001\002\000\006\031" +
    "\167\035\165\001\002\000\006\013\162\014\161\001\002" +
    "\000\006\031\uffe9\035\uffe9\001\002\000\006\031\uffe6\035" +
    "\uffe6\001\002\000\006\031\uffe7\035\uffe7\001\002\000\004" +
    "\043\172\001\002\000\006\031\167\035\165\001\002\000" +
    "\006\031\uffe8\035\uffe8\001\002\000\010\002\uffea\031\uffea" +
    "\035\uffea\001\002\000\004\041\176\001\002\000\006\031" +
    "\114\035\113\001\002\000\010\002\uffed\031\uffed\035\uffed" +
    "\001\002\000\024\011\105\012\077\015\103\016\101\017" +
    "\104\020\076\021\102\022\100\030\240\001\002\000\014" +
    "\004\205\026\207\027\210\031\023\035\022\001\002\000" +
    "\006\031\023\035\022\001\002\000\004\002\ufff7\001\002" +
    "\000\006\031\uffdc\035\uffdc\001\002\000\004\034\232\001" +
    "\002\000\004\002\ufff6\001\002\000\004\034\217\001\002" +
    "\000\004\034\211\001\002\000\004\045\212\001\002\000" +
    "\006\031\215\035\214\001\002\000\010\031\uffd8\033\uffd8" +
    "\035\uffd8\001\002\000\010\004\205\026\207\027\210\001" +
    "\002\000\010\031\uffd3\033\uffd3\035\uffd3\001\002\000\010" +
    "\031\uffd4\033\uffd4\035\uffd4\001\002\000\004\032\220\001" +
    "\002\000\004\036\221\001\002\000\004\042\224\001\002" +
    "\000\006\031\215\035\214\001\002\000\010\031\uffd9\033" +
    "\uffd9\035\uffd9\001\002\000\004\036\225\001\002\000\006" +
    "\033\230\035\227\001\002\000\006\031\uffd7\035\uffd7\001" +
    "\002\000\004\036\221\001\002\000\006\031\uffd5\035\uffd5" +
    "\001\002\000\006\031\uffd6\035\uffd6\001\002\000\004\036" +
    "\233\001\002\000\004\042\234\001\002\000\004\036\235" +
    "\001\002\000\006\031\215\035\214\001\002\000\010\031" +
    "\uffda\033\uffda\035\uffda\001\002\000\006\031\uffdd\035\uffdd" +
    "\001\002\000\010\004\205\026\207\027\210\001\002\000" +
    "\006\031\ufff2\035\ufff2\001\002\000\006\033\245\035\243" +
    "\001\002\000\004\030\240\001\002\000\010\002\uffdb\031" +
    "\uffdb\035\uffdb\001\002\000\010\002\uffd1\031\uffd1\035\uffd1" +
    "\001\002\000\010\002\uffd2\031\uffd2\035\uffd2\001\002\000" +
    "\004\002\ufffa\001\002\000\004\002\ufff8\001\002\000\004" +
    "\032\252\001\002\000\004\030\240\001\002\000\006\031" +
    "\uffde\035\uffde\001\002\000\004\002\001\001\002\000\022" +
    "\011\105\012\077\015\103\016\101\017\104\020\076\021" +
    "\102\022\100\001\002\000\004\030\240\001\002\000\004" +
    "\030\030\001\002\000\004\030\030\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\ufffc\001\002\000\004\002\ufffe" +
    "\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\010\005\017\014\011\023\015" +
    "\030\007\001\001\000\002\001\001\000\004\004\247\001" +
    "\001\000\002\001\001\000\004\004\246\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\067\001\001\000\002\001\001\000\004\004\020\001\001" +
    "\000\002\001\001\000\014\003\023\005\017\014\011\023" +
    "\015\030\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\026\001\001\000\002\001" +
    "\001\000\004\025\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\040\001\001\000\002\001\001\000\004\025\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\057\001\001\000\002\001\001\000\004" +
    "\025\063\001\001\000\004\025\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\114\001\001\000\004\006" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\127\001" +
    "\001\000\002\001\001\000\004\013\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\134\001\001\000\002\001\001\000\004\011\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\157\001\001" +
    "\000\004\013\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\165\001\001\000\004" +
    "\007\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\176\001\001\000\002\001\001\000\006\006\240" +
    "\015\236\001\001\000\006\004\205\016\203\001\001\000" +
    "\004\004\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\212\001\001" +
    "\000\002\001\001\000\004\016\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\221" +
    "\001\001\000\002\001\001\000\004\021\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\225\001\001" +
    "\000\002\001\001\000\004\017\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\241\001\001\000\002" +
    "\001\001\000\004\022\243\001\001\000\004\015\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\252\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\263\001\001\000\004\015\262\001\001\000" +
    "\004\024\261\001\001\000\004\024\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserConf$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserConf$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserConf$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        private ArrayList<ErrorMessage> errores = new ArrayList<ErrorMessage>();

        public ArrayList<ErrorMessage> getErrores(){
            return errores;
        }
        
        public ParserConf(LexerConf lex) { 
            super(lex);   
	}
        
        public void setAccion(String tipo, String mensaje, String accion){
            System.out.println(tipo+"         "+mensaje);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
            System.err.println("Couldn't repair and continue parse "+cur_token.value.toString());
        }

        public void syntax_error(Symbol s){
            String message = "";
            StringBuilder m = new StringBuilder("Error:");
            String cadena = s.value.toString();
            int linea = (s.left+1);
            int columna = (s.right+1);
            switch(s.toString()){
                case "#1" : message=("Con error xd"); break;
                case "#2" : message=("No se espraba la palabra reservada nombres"); break;
                case "#3": message=("No se abrio llaves en la estructura incial."); break;
                case "#4": message=("No se esperaba la palabra reservada Planetas Neutrales"); break;
                case "#5": message= ("No se esperaba la palabra reseravada jugadores"); break;
                case "#6" : message=("No se esperaba la palabra resrvada planetas"); break;
                case "#7" : message=("No se esperaba la palabra rservada id"); break;
                case "#8" : message=("No se esperaba la palabra reservada tamaño"); break;
                case "#9": message=("No se esperaba la palabra reservada Filas"); break;
                case "#10": message=("No se esperba la palabra reservada columnas"); break;
                case "#11": message=("No se esperaba la palabra reservada al azar"); break;
                case "#12": message=("No se esperaba la palabra reservada cantidad planetas neutrales"); break;
                case "#13": message=("No se esperaba la palabra reservada mapaCiego"); break;
                case "#14": message=("No se esperaba la palabra resrvada acumular"); break;
                case "#15": message=("No se esperaba la palabra reservada neutrales"); break;
                case "#16": message=("No se esperaba la palabra reservada finalizacion"); break;
                case "#17": message=("No se esperaba la palabra reservada naves"); break;
                case "#18": message=("No se esperaba la palabra reservada produccion");break;
                case "#19": message=("No se esperaba la palabra reservada porcentaje de muertes"); break;
                case "#20": message=("No se esperaba la palabra reservada planetas"); break;
                case "#21": message=("No se esperaba la palabra rservada tipo"); break;
                case "#22": message=("No se esperaba una llave abierta"); break;
                case "#23": message=("No se esperaba una llave cerrada"); break;
                case "#24": message=("No se esperaba un corchete abierto"); break;
                case "#25": message=("No se esperaba un corchete cerrado"); break;
                case "#26": message=("No se esperaba los dos puntos"); break;
                case "#27": message=("No se esperaba una coma"); break;
                case "#28": message=("No se esperaba una comilla"); break;
                case "#29": message=("No se esperaba la palabra reservada mostrarNaves"); break;
                case "#30": message=("No se esperaba la palabra reservada mostrarEstadisticas"); break;
                case "#31": message=("No se esperaba un valor booleano"); break;
                case "#32": message=("No se esperaba un id"); break;
                case "#33": message=("No se esperaba un entero"); break;
                case "#34": message=("No se esperaba un double"); break;
                case "#35": message=("No se esperaba un tipo de jugador"); break;
                default: message=("Causa desconocida"); break;
            }
            errores.add(new ErrorMessage(linea, columna, cadena, message));
        }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserConf$actions {


    
    ArrayList<Atributo> mapa = new ArrayList<Atributo>();
    ArrayList<Atributo> jugadores = new ArrayList<Atributo>();
    ArrayList<Atributo> planetas = new ArrayList<Atributo>();

    String getValorPorTipo(String tipo, ArrayList<Atributo> objetos){
        String valor = null;
        for (Atributo atributo : objetos) {
            if(atributo.getTipo().equals(tipo))valor = atributo.getValor();
        }
        return valor;
    }

    void aggAtributoMapa(String tipo, String atributo){
        mapa.add(new Atributo(tipo, atributo));
    }

    void aggAtributoJugador(String tipo, String atributo){
        jugadores.add(new Atributo(tipo, atributo));
    }

    void aggAtributoPlaneta(String tipo, String atributo){
        planetas.add(new Atributo(tipo, atributo));
    }
    
    boolean atributoMapaRepetido(String tipo){
        boolean valor = false;
        for(Atributo atributo: mapa){
            if(tipo.equals(atributo.getTipo())){
                valor = true;
            }
        }
        return valor;
    }
    
    boolean nombreJugadorRepetido(String nombre){
        boolean valor = false;
        if(!jugadores.isEmpty()){
            for(Atributo atributo: jugadores){
                if(atributo.getTipo().equals(nombre))valor = true;
            }
        }
        return valor;
    }
    
    boolean nombrePlanetaRepetido(String nombre){
        boolean valor = false;
        if(!planetas.isEmpty()){
            for(Atributo atributo: planetas){
                if(atributo.getTipo().equals(nombre))valor = true;
            }
        }
        return valor;
    }


  private final ParserConf parser;

  /** Constructor */
  CUP$ParserConf$actions(ParserConf parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserConf$do_action_part00000000(
    int                        CUP$ParserConf$act_num,
    java_cup.runtime.lr_parser CUP$ParserConf$parser,
    java.util.Stack            CUP$ParserConf$stack,
    int                        CUP$ParserConf$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserConf$result;

      /* select the action based on the action number */
      switch (CUP$ParserConf$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= So EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).value;
		RESULT = start_val;
              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserConf$parser.done_parsing();
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // So ::= LLAVE_A inicio 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("So",0, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // So ::= error PR_MAPA strMapa 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("So",0, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // So ::= error PR_JUGADORES jugadores 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("So",0, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // So ::= error PR_PLANETAS planetas 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("So",0, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // So ::= error PR_PLANETAS_NEUTRALES planetas 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("So",0, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= dclMapa strInicioPrima 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicio ::= dclJugadores strInicioPrima 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio ::= dclPlanetas strInicioPrima 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inicio ::= dclPlanetasNeutrales strInicioPrima 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicio ::= error CORCHETE_C strInicioPrima 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inicio ::= error LLAVE_C strInicioPrima 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // strInicioPrima ::= SEPARADOR inicio 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strInicioPrima",2, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // strInicioPrima ::= LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strInicioPrima",2, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dclMapa ::= PR_MAPA ASIGNACION LLAVE_A strMapa 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("dclMapa",3, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-3)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dclMapa ::= error SEPARADOR strMapa 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("dclMapa",3, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // strMapa ::= PR_ID ASIGNACION COMILLA ID COMILLA strMapaPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)).value;
		 
                            if(atributoMapaRepetido("id")){
                               errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(), "Se ha repetido elatributo id"));
                            }else{
                                aggAtributoMapa("id", e); 
                            }
                        
              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strMapa",4, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-5)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // strMapa ::= PR_AZAR ASIGNACION BOOLEAN strMapaPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).value;
		 
                            if(atributoMapaRepetido("alAzar")){
                                errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(), "Se ha repetido el atributo alAzar"));
                            }else{
                                aggAtributoMapa("alAzar", e); 
                            }
                        
              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strMapa",4, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-3)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // strMapa ::= PR_CANTIDAD_PLANETAS_NEUTRALES ASIGNACION ENTERO strMapaPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).value;
		 
                            if(atributoMapaRepetido("planetasNeutrales")){
                                errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(), "se ha repetido el atributo planetasNeutrales"));
                            }else{
                                aggAtributoMapa("planetasNeutrales", e); 
                            }
                        
              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strMapa",4, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-3)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // strMapa ::= PR_MAPA_CIEGO ASIGNACION BOOLEAN strMapaPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).value;
		 
                            if(atributoMapaRepetido("mapaCiego")){
                                errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(), "Se ha repetido el atributo mapa ciego"));
                            }else{
                                aggAtributoMapa("mapaCiego", e); 
                            }
                        
              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strMapa",4, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-3)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // strMapa ::= PR_ACUMULAR ASIGNACION BOOLEAN strMapaPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).value;
		 
                            if(atributoMapaRepetido("acumular")){
                                errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(), "Se ha repetido el atributo acumular"));
                            }else{
                                aggAtributoMapa("acumular", e); 
                            }
                        
              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strMapa",4, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-3)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // strMapa ::= PR_FINALIZACION ASIGNACION ENTERO strMapaPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).value;
		 
                            if(atributoMapaRepetido("finalizacion")){
                               errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(), "Se ha repetido el atributo finalizacion"));
                            }else{
                                aggAtributoMapa("finalizacion", e); 
                            }
                        
              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strMapa",4, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-3)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // strMapa ::= PR_NEUTRALES ASIGNACION LLAVE_A strNeutralesConf strMapaPrima 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strMapa",4, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-4)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // strMapa ::= PR_SIZE ASIGNACION LLAVE_A strSize strMapaPrima 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strMapa",4, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-4)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // strSize ::= PR_FILAS ASIGNACION ENTERO strSizePrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).value;
		 
                            if(atributoMapaRepetido("filas")){
                                errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(), "Se ha repetido el atributo filas"));
                            }else{
                                aggAtributoMapa("filas", e); 
                            }
                        
              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strSize",5, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-3)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // strSize ::= PR_COLUMNAS ASIGNACION ENTERO strSizePrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).value;
		 
                            if(atributoMapaRepetido("columnas")){
                                errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(), "Se ha repetido el atributo Columnas"));
                            }else{
                                aggAtributoMapa("columnas", e); 
                            }
                        
              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strSize",5, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-3)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // strSizePrima ::= SEPARADOR strSize 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strSizePrima",6, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // strSizePrima ::= LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strSizePrima",6, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // strNeutralesConf ::= PR_MOSTRAR_NAVES ASIGNACION BOOLEAN strNeutralesPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).value;
		 
                            if(atributoMapaRepetido("mostrarNaves")){
                                errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(), "Se ha repetido el atributo mostrarNaves"));
                            }else{
                                aggAtributoMapa("mostrarNaves", e); 
                            }
                        
              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strNeutralesConf",7, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-3)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // strNeutralesConf ::= PR_MOSTRAR_ESTADISTICAS ASIGNACION BOOLEAN strNeutralesPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).value;
		 
                            if(atributoMapaRepetido("mostrarEstadisticas")){
                               errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(), "Se ha repetido el atributo mostrar Estadisticas"));
                            }else{
                                aggAtributoMapa("mostrarEstadisticas", e); 
                            }
                        
              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strNeutralesConf",7, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-3)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // strNeutralesConf ::= PR_PRODUCCION ASIGNACION ENTERO strNeutralesPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).value;
		 
                            if(atributoMapaRepetido("produccion")){
                                errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(), "Se ha repetido el atributo produccion"));
                            }else{
                                aggAtributoMapa("produccion", e); 
                            }
                        
              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strNeutralesConf",7, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-3)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // strNeutralesPrima ::= SEPARADOR strNeutralesConf 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strNeutralesPrima",8, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // strNeutralesPrima ::= LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strNeutralesPrima",8, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // strMapaPrima ::= SEPARADOR strMapa 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strMapaPrima",9, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // strMapaPrima ::= LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strMapaPrima",9, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dclJugadores ::= PR_JUGADORES ASIGNACION CORCHETE_A jugadores 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("dclJugadores",10, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-3)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dclJugadores ::= error SEPARADOR jugadores 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("dclJugadores",10, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dclJugadores ::= error LLAVE_C strJugador 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("dclJugadores",10, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // jugadores ::= LLAVE_A strJugador listJugadores 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("jugadores",11, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // strJugador ::= PR_NOMBRE ASIGNACION COMILLA ID COMILLA strJugadorPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)).value;
		 
                            if(nombreJugadorRepetido(e)){
                                errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(), "Se ha repetido el nombre del jugador"));
                            }else{
                                aggAtributoJugador("nombre", e); 
                            }
                        
              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strJugador",12, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-5)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // strJugador ::= PR_PLANETAS_JUGADORES ASIGNACION CORCHETE_A cadenas strJugadorPrima 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strJugador",12, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-4)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // strJugador ::= PR_TIPO ASIGNACION TIPO strJugadorPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).value;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strJugador",12, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-3)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cadenas ::= COMILLA ID COMILLA cadenaPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)).value;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("cadenas",13, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-3)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cadenaPrima ::= SEPARADOR cadenas 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("cadenaPrima",14, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cadenaPrima ::= CORCHETE_C 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("cadenaPrima",14, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // strJugadorPrima ::= SEPARADOR strJugador 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strJugadorPrima",15, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // strJugadorPrima ::= LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strJugadorPrima",15, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // listJugadores ::= SEPARADOR jugadores 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("listJugadores",16, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // listJugadores ::= CORCHETE_C 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("listJugadores",16, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dclPlanetas ::= PR_PLANETAS ASIGNACION CORCHETE_A planetas 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("dclPlanetas",17, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-3)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // planetas ::= LLAVE_A strPlaneta listPlanetas 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("planetas",18, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // strPlaneta ::= PR_NOMBRE ASIGNACION COMILLA ID COMILLA strPlanetaPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)).value;
		 
                            if(nombrePlanetaRepetido(e)){
                                errores.add(new ErrorMessage(cur_token.left+1, cur_token.right+1, cur_token.value.toString(), "Se repitio el valor del nombre asignado"));
                            }else{
                                aggAtributoPlaneta("nombre", e);
                            }
                        
              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strPlaneta",19, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-5)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // strPlaneta ::= PR_NAVES ASIGNACION ENTERO strPlanetaPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).value;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strPlaneta",19, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-3)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // strPlaneta ::= PR_PRODUCCION ASIGNACION ENTERO strPlanetaPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).value;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strPlaneta",19, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-3)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // strPlaneta ::= PR_PORCENTAJE_MUERTES ASIGNACION DOUBLE strPlanetaPrima 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)).value;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strPlaneta",19, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-3)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // strPlaneta ::= error LLAVE_A strPlaneta 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strPlaneta",19, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // strPlaneta ::= error SEPARADOR strPlaneta 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strPlaneta",19, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-2)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // strPlanetaPrima ::= SEPARADOR strPlaneta 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strPlanetaPrima",20, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // strPlanetaPrima ::= LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("strPlanetaPrima",20, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // listPlanetas ::= SEPARADOR planetas 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("listPlanetas",21, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-1)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // listPlanetas ::= CORCHETE_C 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("listPlanetas",21, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // dclPlanetasNeutrales ::= PR_PLANETAS_NEUTRALES ASIGNACION CORCHETE_A planetas 
            {
              Object RESULT =null;

              CUP$ParserConf$result = parser.getSymbolFactory().newSymbol("dclPlanetasNeutrales",22, ((java_cup.runtime.Symbol)CUP$ParserConf$stack.elementAt(CUP$ParserConf$top-3)), ((java_cup.runtime.Symbol)CUP$ParserConf$stack.peek()), RESULT);
            }
          return CUP$ParserConf$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserConf$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserConf$do_action(
    int                        CUP$ParserConf$act_num,
    java_cup.runtime.lr_parser CUP$ParserConf$parser,
    java.util.Stack            CUP$ParserConf$stack,
    int                        CUP$ParserConf$top)
    throws java.lang.Exception
    {
              return CUP$ParserConf$do_action_part00000000(
                               CUP$ParserConf$act_num,
                               CUP$ParserConf$parser,
                               CUP$ParserConf$stack,
                               CUP$ParserConf$top);
    }
}

}
